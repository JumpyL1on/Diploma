@page "/account/register"
@using Frontend.Application.Features.Register
@attribute [AllowAnonymous]
<EditForm Model="RegisterCommand" OnValidSubmit="OnValidSubmitAsync">
    <MudCard Class="ma-auto" Style="width: 30%">
        <MudCardContent>
            <MudGrid>
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h4">Register</MudText>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudText>Already have an account? <MudLink Href="/account/login">Sign In</MudLink></MudText>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Имя" Variant="Variant.Outlined" @bind-Value="RegisterCommand.Name"
                                  For="() => RegisterCommand.Name"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Никнейм" Variant="Variant.Outlined" @bind-Value="RegisterCommand.UserName"
                                  For="() => RegisterCommand.UserName"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Фамилия" Variant="Variant.Outlined" @bind-Value="RegisterCommand.Surname"
                                  For="() => RegisterCommand.Surname"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="E-mail" Variant="Variant.Outlined" @bind-Value="RegisterCommand.Email"
                                  For="() => RegisterCommand.Email"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Password" Variant="Variant.Outlined"
                                  @bind-Value="RegisterCommand.Password" For="() => RegisterCommand.Password"
                                  InputType="InputType" Adornment="Adornment.End"
                                  AdornmentIcon="@InputIcon" OnAdornmentClick="Toggle"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Confirm password" Variant="Variant.Outlined"
                                  @bind-Value="RegisterCommand.ConfirmPassword" For="() => RegisterCommand.ConfirmPassword"
                                  InputType="InputType.Password"/>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                               Size="Size.Large" Style="width: 100%">Register</MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</EditForm>
@code
{
    private RegisterCommand RegisterCommand { get; } = new();
    private bool IsPasswordVisible { get; set; }
    private InputType InputType { get; set; } = InputType.Password;
    private string InputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;

    [Inject]
    public IMediator Mediator { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ISnackbar Snackbar { get; set; }

    private void Toggle()
    {
        if (IsPasswordVisible)
        {
            IsPasswordVisible = false;
            InputType = InputType.Password;
            InputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            IsPasswordVisible = true;
            InputType = InputType.Text;
            InputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var result = await Mediator.Send(RegisterCommand);
        if (result.Succeeded)
            NavigationManager.NavigateTo("account/login");
        else
            foreach (var error in result.Errors)
                Snackbar.Add(error, Severity.Error);
    }
}